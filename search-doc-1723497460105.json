[{"title":"TableUtils","type":0,"sectionRef":"#","url":"/TableUtils/api/TableUtils","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#types","content":" "},{"title":"Array<V>​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#Array<V>","content":"&lt;/&gt; type Array&lt;V&gt; = {V} A table composed strictly of values with the type of 'V'  "},{"title":"Dictionary<K,V>​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#Dictionary<K,V>","content":"&lt;/&gt; type Dictionary&lt;K,V&gt; = {[K]: V} A table composed strictly of keys with the type of 'K', and values with the type of 'V'  "},{"title":"NestedDic<K,V>​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#NestedDic<K,V>","content":"&lt;/&gt; type NestedDic&lt;K,V&gt; = {[K]: V | NestedDict} A table composed strictly of keys with the type of 'K', and values with the type of 'V', this table can also be nested. "},{"title":"Functions​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#functions","content":" "},{"title":"chunk​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#chunk","content":"&lt;/&gt; TableUtils.chunk( array: Array&lt;V&gt;,-- The inputted array size: number-- The size of each chunk ) → Array&lt;Array&lt;V&gt;&gt;-- An array containing chunks of the original array Splits an array into chunks of a specified size. -- Define an array local myArray = {1, 2, 3, 4, 5} -- Chunk the array local chunks = TableUtils.chunk(myArray, 2) for _, chunk in ipairs(chunks) do print(table.concat(chunk, &quot;, &quot;)) end -- Output: -- 1, 2 -- 3, 4 -- 5   "},{"title":"clone​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#clone","content":"&lt;/&gt; TableUtils.clone( tbl: NestedDict&lt;K,V&gt;-- The dictionary to clone ) → NestedDict&lt;K,V&gt;-- A new dictionary that is a deep copy of the original Creates a deep copy of a nested dictionary. -- Define a nested dictionary local myDict = {a = {b = 1}, c = 2} -- Clone the dictionary local clonedDict = TableUtils.clone(myDict) print(clonedDict.a.b) -- Output: 1 print(clonedDict.c) -- Output: 2   "},{"title":"cloneShallow​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#cloneShallow","content":"&lt;/&gt; TableUtils.cloneShallow( tbl: Dictionary&lt;K,V&gt;-- The dictionary to clone ) → Dictionary&lt;K,V&gt;-- A new dictionary that is a shallow copy of the original Creates a shallow copy of a dictionary. -- Define a dictionary local myDict = {a = 1, b = 2} -- Create a shallow copy local shallowCopy = TableUtils.cloneShallow(myDict) print(shallowCopy.a) -- Output: 1 print(shallowCopy.b) -- Output: 2   "},{"title":"every​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#every","content":"&lt;/&gt; TableUtils.every( tbl: Dictionary&lt;K,V&gt;,-- The input dictionary predicate: ( key: K, value: V ) → boolean-- A predicate function to check elements ) → boolean-- Returns true if all elements satisfy the condition, otherwise false Checks if all elements in a dictionary satisfy a condition. -- Define a dictionary local myDict = {a = 2, b = 4, c = 6} -- Check if all values are even local allEven = TableUtils.every(myDict, function(key, value) return value % 2 == 0 end) print(allEven) -- Output: true   "},{"title":"filter​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#filter","content":"&lt;/&gt; TableUtils.filter( tbl: Dictionary&lt;K,V&gt;,-- The input dictionary predicate: ( key: K, value: V ) → boolean-- A predicate function to determine which elements to include ) → Array&lt;V&gt;-- An array of values that satisfy the predicate Filters elements of a dictionary based on a predicate function. -- Define a dictionary local myDict = {a = 1, b = 2, c = 3} -- Filter values greater than 1 local filteredValues = TableUtils.filter(myDict, function(key, value) return value &gt; 1 end) print(table.concat(filteredValues, &quot;, &quot;)) -- Output: 2, 3   "},{"title":"find​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#find","content":"&lt;/&gt; TableUtils.find( tbl: Dictionary&lt;K,V&gt;,-- The input dictionary predicate: ( key: K, value: V ) → boolean-- A predicate function to determine the matching element ) → V?-- The first element that matches the predicate, or nil if no match is found Finds the first element in a dictionary that matches a given condition. -- Define a dictionary local myDict = {a = 1, b = 2, c = 3} -- Find the first value greater than 1 local result = TableUtils.find(myDict, function(key, value) return value &gt; 1 end) print(result) -- Output: 2   "},{"title":"findRecursive​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#findRecursive","content":"&lt;/&gt; TableUtils.findRecursive( tbl: Dictionary&lt;K,V&gt;,-- The dictionary to search through value: any,-- The value to replace with predicate: ( key: K, value: V ) → boolean-- A predicate function to determine if an item should be replaced ) → Dictionary&lt;K,V&gt;-- A new dictionary with values replaced based on the predicate Recursively finds and replaces values in a dictionary based on a predicate function. -- Define a dictionary local myDict = {a = 1, b = {c = 2, d = 3}} -- Recursively replace values equal to 2 with 99 local newDict = TableUtils.findRecursive(myDict, 99, function(key, value) return value == 2 end) print(newDict.b.c) -- Output: 99   "},{"title":"flatten​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#flatten","content":"&lt;/&gt; TableUtils.flatten( tbl: NestedDict&lt;K,V&gt;-- The input nested dictionary ) → Array&lt;V&gt;-- A single-level array containing all values from the nested dictionary Flattens a nested dictionary into a single-level array. -- Define a nested dictionary local myDict = {a = 1, b = {c = 2, d = 3}} -- Flatten the dictionary local flattened = TableUtils.flatten(myDict) print(table.concat(flattened, &quot;, &quot;)) -- Output: 1, 2, 3   "},{"title":"indexOf​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#indexOf","content":"&lt;/&gt; TableUtils.indexOf( array: Array&lt;V&gt;,-- The inputted array value: V-- The value to search for in the array ) → number-- Returns the index of value, if not found returns -1 Finds the index of a value within the inputted array. -- Define an array local myArray = {1, 2, 3, 4, 5} -- Find the index of a value print(TableUtils.indexOf(myArray, 3)) -- Output: 3 -- Find the index of a non-existent value print(TableUtils.indexOf(myArray, 6)) -- Output: -1   "},{"title":"isArray​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#isArray","content":"&lt;/&gt; TableUtils.isArray( tbl: Array&lt;V&gt; | Table&lt;any,V&gt;-- The inputted array or table ) → boolean-- Returns whether or not the input table is an array Checks if the inputted table is an array. -- Define an array local myArray = {1, 2, 3, 4, 5} -- Check if it is an array print(TableUtils.isArray(myArray)) -- Output: true -- Define a non-array table local myTable = {a = 1, b = 2} -- Check if it is an array print(TableUtils.isArray(myTable)) -- Output: false   "},{"title":"keys​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#keys","content":"&lt;/&gt; TableUtils.keys( tbl: Dictionary&lt;K,V&gt;-- The input dictionary ) → Array&lt;K&gt;-- An array containing all keys from the dictionary Gets all keys from a dictionary. -- Define a dictionary local myDict = {a = 1, b = 2, c = 3} -- Get all keys local keys = TableUtils.keys(myDict) print(table.concat(keys, &quot;, &quot;)) -- Output: a, b, c   "},{"title":"length​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#length","content":"&lt;/&gt; TableUtils.length( array: Array&lt;V&gt;-- The inputted array ) → number-- Returns the total number of objects within an array Counts the number of items in an array. -- Define an array local myArray = {1, 2, 3, 4, 5} -- Find the length of the array print(TableUtils.length(myArray)) -- Output: 5   "},{"title":"map​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#map","content":"&lt;/&gt; TableUtils.map( array: Array&lt;V&gt;,-- The inputted array callback: ( index: number, value: V ) → R-- A callback function that maps values to a new type ) → Array&lt;R&gt;-- A new array with mapped values Maps each element in an array to a new value based on a callback function. -- Define an array local myArray = {1, 2, 3, 4, 5} -- Map array elements local mappedArray = TableUtils.map(myArray, function(index, value) return value * 2 end) print(table.concat(mappedArray, &quot;, &quot;)) -- Output: 2, 4, 6, 8, 10   "},{"title":"merge​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#merge","content":"&lt;/&gt; TableUtils.merge( ...: ( Array&lt;V&gt; | Dictionary&lt;K, V&gt; )-- Arrays or dictionaries to be merged ) → ( Array&lt;V&gt; | Dictionary&lt;K, V&gt; )-- A new array or dictionary containing all elements from the input tables Merges multiple arrays or dictionaries into one. For arrays, the function concatenates all input arrays into a single array. For dictionaries, the function combines all input dictionaries into a single dictionary. -- Define arrays to merge local array1 = {1, 2} local array2 = {3, 4} local array3 = {5, 6} -- Merge arrays local mergedArray = TableUtils.merge(array1, array2, array3) print(table.concat(mergedArray, &quot;, &quot;)) -- Output: 1, 2, 3, 4, 5, 6 -- Define dictionaries to merge local dict1 = {a = 1, b = 2} local dict2 = {c = 3, d = 4} -- Merge dictionaries local mergedDict = TableUtils.merge(dict1, dict2) for k, v in pairs(mergedDict) do print(k, v) end -- Output: -- a 1 -- b 2 -- c 3 -- d 4   "},{"title":"mergeDeep​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#mergeDeep","content":"&lt;/&gt; TableUtils.mergeDeep( ...: NestedDict&lt;K,V&gt;-- Nested dictionaries to be merged ) → NestedDict&lt;K,V&gt;-- A new nested dictionary containing all key-value pairs from the input dictionaries Deeply merges multiple nested dictionaries into one. -- Define nested dictionaries to merge local dict1 = {a = {x = 1}, b = 2} local dict2 = {a = {y = 2}, c = 3} -- Deeply merge dictionaries local mergedDict = TableUtils.mergeDeep(dict1, dict2) print(mergedDict.a.x) -- Output: 1 print(mergedDict.a.y) -- Output: 2 print(mergedDict.b) -- Output: 2 print(mergedDict.c) -- Output: 3   "},{"title":"reduce​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#reduce","content":"&lt;/&gt; TableUtils.reduce( array: Array&lt;V&gt;,-- The inputted array callback: ( accumulator: V, index: number, value: U ) → U,-- A callback function to reduce values initialValue: U-- The initial value for the reduction ) → U-- The final reduced value Reduces an array to a single value based on a callback function and an initial value. -- Define an array local myArray = {1, 2, 3, 4, 5} -- Reduce the array elements to a single value (sum) local sum = TableUtils.reduce(myArray, function(accumulator, value, index) return accumulator + value end, 0) print(sum) -- Output: 15   "},{"title":"reverse​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#reverse","content":"&lt;/&gt; TableUtils.reverse( array: Array&lt;V&gt;-- The inputted array ) → Array&lt;V&gt;-- The reversed array Reverses the elements of an array in place. -- Define an array local myArray = {1, 2, 3, 4, 5} -- Reverse the array local reversedArray = TableUtils.reverse(myArray) print(table.concat(reversedArray, &quot;, &quot;)) -- Output: 5, 4, 3, 2, 1   "},{"title":"some​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#some","content":"&lt;/&gt; TableUtils.some( tbl: Dictionary&lt;K,V&gt;,-- The input dictionary predicate: ( key: K, value: V ) → boolean-- A predicate function to check elements ) → boolean-- Returns true if at least one element satisfies the condition, otherwise false Checks if at least one element in a dictionary satisfies a condition. -- Define a dictionary local myDict = {a = 1, b = 2, c = 3} -- Check if any value is greater than 2 local hasGreaterThan2 = TableUtils.some(myDict, function(key, value) return value &gt; 2 end) print(hasGreaterThan2) -- Output: true   "},{"title":"unique​","type":1,"pageTitle":"TableUtils","url":"/TableUtils/api/TableUtils#unique","content":"&lt;/&gt; TableUtils.unique( array: Array&lt;V&gt;-- The inputted array ) → Array&lt;V&gt;-- A new array with duplicate values removed Removes duplicate values from an array. -- Define an array with duplicates local myArray = {1, 2, 2, 3, 4, 4, 5} -- Remove duplicates local uniqueArray = TableUtils.unique(myArray) print(table.concat(uniqueArray, &quot;, &quot;)) -- Output: 1, 2, 3, 4, 5  "}]